---
- name: Seleção de hosts e ajustes de inventarios
  hosts: "{{ updatefix_inventory_group_ok }}"
  vars_files:
    - vars/vars.yml
  gather_facts: True
  become: yes
  tasks:

    - name: Coletar fatos locais
      ansible.builtin.setup:
        filter: ansible_local

    - name: Converter 'top_processes' string para list
      set_fact:
        top_processes_list: "{{ ansible_local.proccess_status_check.localfacts.top_processes | from_yaml }}"

    - name: Converter 'top_non_root_processes' string para list
      set_fact:
        top_non_root_processes_list: "{{ ansible_local.proccess_status_check.localfacts.top_non_root_processes | from_yaml }}"

    - name: Convert 'active_enabled_services' string to list
      set_fact:
         active_enabled_services_list: "{{ ansible_local.services_status_check.localfacts.active_enabled_services | from_yaml }}"

    - name: Convert 'active_disabled_services' string to list
      set_fact:
         active_disabled_services_list: "{{ ansible_local.services_status_check.localfacts.active_disabled_services | from_yaml }}"

    - name: Definir ready_for_update baseado em verificações
      set_fact:
        ready_for_update: "FAIL"
      when: >
        ansible_local.root_space_check.localfacts.root_space_check == "FAIL" or
        ansible_local.boot_space_check.localfacts.boot_space_check == "FAIL" or
        ansible_local.root_readonly_check.localfacts.root_readonly_check == "FAIL" or
        ansible_local.boot_readonly_check.localfacts.boot_readonly_check == "FAIL" or
        ansible_local.subscription_check.localfacts.subscription_check == "FAIL" or
        ansible_local.repository_check.localfacts.repository_check == "FAIL" or
        ansible_local.rpm_check.localfacts.rpm_check == "FAIL" or
        ansible_local.zombie_process_check.localfacts.zombie_process_check == "FAIL" or
        ansible_local.uptime_reboot_check.localfacts.uptime_reboot_check == "FAIL" or
        ansible_local.mount_points_check.localfacts.mount_points_fstab_check == "FAIL"


#add, estamos removendo nesse testes pois o servidor não possui zabbix instalado.  ansible_local.services_status_check.localfacts.zabbix_service == "FAIL" 

    - name: Definir ready_for_update como OK se todas as verificações passarem
      set_fact:
        ready_for_update: "OK"
      when: ready_for_update is not defined

    - name: Criar arquivos de facts para servidores que passaram pela verificação
      template:
        src: ready_for_update.j2
        dest: "/etc/ansible/facts.d/ready_for_update.fact"

#ansible_local.services_status_check.localfacts.ready_for_update == OK

    - name: Ajustar variável de status do host no inventory e group Updatefix  {{ updatefix_inventory_group }} 
      ansible.controller.host:
        name: "{{ item }}"
        inventory: "{{ updatefix_inventory }}"
        enabled: true
        variables:
          host_exists_in_inventory: "{{ hostvars[item]['host_exists_in_inventory'] }}"
          hosts_reachable: "{{ hostvars[item]['hosts_reachable'] }}"
          ready_for_update: "{{ ready_for_update }}"
      loop: "{{ groups[updatefix_inventory_group_ok] }}"
      delegate_to: localhost
      run_once: true

    - name: Gerar relatório de validação
      template:
        src: validacao.j2
        dest: /var/log/ansible/updatefix/updatefix_{{ updatefix_version }}/validacao.log